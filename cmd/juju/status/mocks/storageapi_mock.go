// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/cmd/juju/storage (interfaces: StorageListAPI)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	params "github.com/juju/juju/rpc/params"
)

// MockStorageListAPI is a mock of StorageListAPI interface.
type MockStorageListAPI struct {
	ctrl     *gomock.Controller
	recorder *MockStorageListAPIMockRecorder
}

// MockStorageListAPIMockRecorder is the mock recorder for MockStorageListAPI.
type MockStorageListAPIMockRecorder struct {
	mock *MockStorageListAPI
}

// NewMockStorageListAPI creates a new mock instance.
func NewMockStorageListAPI(ctrl *gomock.Controller) *MockStorageListAPI {
	mock := &MockStorageListAPI{ctrl: ctrl}
	mock.recorder = &MockStorageListAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageListAPI) EXPECT() *MockStorageListAPIMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockStorageListAPI) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStorageListAPIMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStorageListAPI)(nil).Close))
}

// ListFilesystems mocks base method.
func (m *MockStorageListAPI) ListFilesystems(arg0 []string) ([]params.FilesystemDetailsListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFilesystems", arg0)
	ret0, _ := ret[0].([]params.FilesystemDetailsListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFilesystems indicates an expected call of ListFilesystems.
func (mr *MockStorageListAPIMockRecorder) ListFilesystems(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFilesystems", reflect.TypeOf((*MockStorageListAPI)(nil).ListFilesystems), arg0)
}

// ListStorageDetails mocks base method.
func (m *MockStorageListAPI) ListStorageDetails() ([]params.StorageDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStorageDetails")
	ret0, _ := ret[0].([]params.StorageDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStorageDetails indicates an expected call of ListStorageDetails.
func (mr *MockStorageListAPIMockRecorder) ListStorageDetails() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStorageDetails", reflect.TypeOf((*MockStorageListAPI)(nil).ListStorageDetails))
}

// ListVolumes mocks base method.
func (m *MockStorageListAPI) ListVolumes(arg0 []string) ([]params.VolumeDetailsListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVolumes", arg0)
	ret0, _ := ret[0].([]params.VolumeDetailsListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVolumes indicates an expected call of ListVolumes.
func (mr *MockStorageListAPIMockRecorder) ListVolumes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVolumes", reflect.TypeOf((*MockStorageListAPI)(nil).ListVolumes), arg0)
}
